{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/Getting-Started","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This article describes how to get started with both KeyboardKit & KeyboardKit Pro. Each section will first show you how to do something for KeyboardKit, then for KeyboardKit Pro.","type":"text"}]},{"text":"How to use KeyboardKit","level":2,"type":"heading","anchor":"How-to-use-KeyboardKit"},{"inlineContent":[{"type":"text","text":"Keyboard extensions can use KeyboardKit to create custom keyboards, while the main app can use it to check keyboard state, provide keyboard-specific settings, link to System Settings, etc."}],"type":"paragraph"},{"inlineContent":[{"text":"KeyboardKit requires slightly different setup depending on if you set it up for a keyboard extension or an app.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"How to set up KeyboardKit for a keyboard extension","anchor":"How-to-set-up-KeyboardKit-for-a-keyboard-extension"},{"inlineContent":[{"type":"text","text":"To set up KeyboardKit for a keyboard extension, import KeyboardKit and let "},{"type":"codeVoice","code":"KeyboardViewController"},{"type":"text","text":" inherit "},{"type":"reference","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController","isActive":true},{"type":"text","text":" instead of "},{"code":"UIInputViewController","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import KeyboardKit \/\/ or KeyboardKitPro","","class KeyboardController: KeyboardInputViewController {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives you access to lifecycle functions like "},{"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/viewWillSetupKeyboard()","isActive":true,"type":"reference"},{"type":"text","text":", observable "},{"isActive":true,"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/state","type":"reference"},{"type":"text","text":", keyboard "},{"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/services","type":"reference","isActive":true},{"text":", and more.","type":"text"}]},{"inlineContent":[{"text":"KeyboardKit will by default use a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/SystemKeyboard","type":"reference"},{"type":"text","text":" as the main keyboard view. To replace or customize it, just override "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/viewWillSetupKeyboard()"},{"type":"text","text":" and call any setup function with a custom view:"}],"type":"paragraph"},{"syntax":"swift","code":["class KeyboardViewController: KeyboardInputViewControllerÂ {","","    override func viewWillSetupKeyboard() {","        super.viewWillSetupKeyboard()","        setup { controller in","            SystemKeyboard(","                state: controller.state,","                services: controller.services,","                buttonContent: { $0.view },","                buttonView: { $0.view },","                emojiKeyboard: { $0.view },","                toolbar: { _ in MyCustomToolbar() }","            )","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can use the view builder "},{"type":"codeVoice","code":"controller"},{"text":" parameter to access ","type":"text"},{"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/state","type":"reference","isActive":true},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/services","type":"reference"},{"type":"text","text":" and any other properties and functions you need."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"The view builder provides you with an unowned controller, to avoid memory leaks. If you pass it on, make sure to keep it unowned!"}],"type":"paragraph"}],"style":"important","type":"aside","name":"Important"},{"anchor":"ðŸ‘‘-KeyboardKit-Pro","level":3,"type":"heading","text":"ðŸ‘‘ KeyboardKit Pro"},{"inlineContent":[{"type":"text","text":"Unlike KeyboardKit, KeyboardKit Pro has a setup function that lets you register a license key, after which KeyboardKit Pro automatically sets up your license and unlocks all included features."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To use KeyboardKit Pro with the default "},{"type":"reference","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/SystemKeyboard","isActive":true},{"type":"text","text":" view, just call "},{"type":"strong","inlineContent":[{"type":"text","text":"setupPro"}]},{"type":"text","text":" without a view in "},{"inlineContent":[{"type":"text","text":"viewDidLoad"}],"type":"strong"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["import KeyboardKitPro","","class KeyboardViewController: KeyboardInputViewController {","","    func viewDidLoad() {","        super.viewDidLoad()","        setupPro(","            withLicenseKey: \"your-license-key\",","            locales: [...], \/\/ Define which locales to use for Basic & Silver licenses","            licenseConfiguration: { license in ... }  \/\/ Customize the keyboard for the license","        )","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"To use KeyboardKit Pro with a custom view, just call "},{"inlineContent":[{"text":"setupPro","type":"text"}],"type":"strong"},{"text":" and provide it with any custom view in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/viewWillSetupKeyboard()"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["import KeyboardKitPro","","class KeyboardViewController: KeyboardInputViewControllerÂ {","","    override func viewWillSetupKeyboard() {","        super.viewWillSetupKeyboard()","        setupPro(","            withLicenseKey: \"your-license-key\",","            locales: [...], \/\/ Define which locales to use for Basic & Silver licenses","            licenseConfiguration: { license in ... }  \/\/ Customize the keyboard for the license","            view: { controller in","                SystemKeyboard(","                    state: controller.state,","                    services: controller.services,","                    buttonContent: { $0.view },","                    buttonView: { $0.view },","                    emojiKeyboard: { $0.view },","                    toolbar: { _ in MyCustomToolbar() }","                )","            }","        )","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since Basic, Silver, and monthly Gold licenses validate licenses over the Internet, your keyboard extension must enable Full Access to be able to make network requests. This is not needed for yearly Gold and custom licenses, which are validated on-device."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A Basic license unlocks 1 locale, Silver unlocks 5 and Gold unlocks all supported locales. You can change which locales to use for each new version of your app, after which the locales will be persisted for that particular app version.","type":"text"}]}],"name":"Important","type":"aside","style":"important"},{"level":2,"type":"heading","text":"How to set up KeyboardKit for an app","anchor":"How-to-set-up-KeyboardKit-for-an-app"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use KeyboardKit in your main app, to check keyboard enabled state and Full Access, provide keyboard settings, link to System Settings, etc. Itâ€™s a great place to provide app settings, since it has more available space than the keyboard extension."}]},{"type":"paragraph","inlineContent":[{"text":"You donâ€™t have to set up KeyboardKit in your app. Just import KeyboardKit in any file where you want to use it, and youâ€™re good to go.","type":"text"}]},{"text":"ðŸ‘‘ KeyboardKit Pro","type":"heading","anchor":"ðŸ‘‘-KeyboardKit-Pro","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"To set up KeyboardKit Pro in your main app, just register your license key as soon as the the application launches:"}]},{"code":["import KeyboardKitPro","","@main","struct MyApp: App {","","    var body: some Scene {","        WindowGroup {","            ContentView()","                .task { setupKeyboardKitPro() }","        }","    }","}","","extension MyApp {","","    func setupKeyboardKitPro() async throws {","        do {","            let license = try await License.register(...)","            \/\/ KeyboardKit Pro is now activated.","        } catch {","            print(error)","            \/\/ Handle the license error in any way you want.","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you need to use Pro features on the root screen, just set some observed state when the license is registered to force a view update."}],"type":"paragraph"},{"type":"heading","text":"How to set up KeyboardKit as a package dependency","level":2,"anchor":"How-to-set-up-KeyboardKit-as-a-package-dependency"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To set up KeyboardKit as a transient package dependency, just add it to package dependencies and link it to any target that needs it."}]},{"level":3,"type":"heading","anchor":"ðŸ‘‘-KeyboardKit-Pro","text":"ðŸ‘‘ KeyboardKit Pro"},{"inlineContent":[{"text":"Since KeyboardKit Pro is a binary target, it requires some special handling to be used as a transient package dependency:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You donâ€™t have to link to KeyboardKit Pro from any target."}]}]},{"content":[{"inlineContent":[{"text":"You ","type":"text"},{"inlineContent":[{"type":"text","text":"must"}],"type":"emphasis"},{"type":"text","text":" update "},{"type":"strong","inlineContent":[{"type":"text","text":"runpath search paths"}]},{"type":"text","text":" under "},{"type":"strong","inlineContent":[{"text":"Build Settings","type":"text"}]},{"text":".","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"For the main app, set it to "},{"type":"strong","inlineContent":[{"type":"text","text":"@executable_path\/Frameworks"}]},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For the keyboard, set it to "},{"type":"strong","inlineContent":[{"text":"@executable_path\/..\/..\/Frameworks","type":"text"}]},{"type":"text","text":"."}]}]}],"type":"unorderedList"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Failing to set the search paths will cause a runtime crash when you try to use KeyboardKit Pro."}]},{"level":2,"anchor":"How-to-use-KeyboardKit-state--services","type":"heading","text":"How to use KeyboardKit state & services"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The KeyboardKit "},{"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController","isActive":true,"type":"reference"},{"text":" provides you with keyboard-specific observable ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/state","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/services","type":"reference","isActive":true},{"type":"text","text":", that let you build powerful keyboards."}]},{"type":"paragraph","inlineContent":[{"text":"KeyboardKit injects all these observable state types into the view hierarchy as environment objects, to let you access them like this:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct CustomKeyboard: View {","","    init(","        actionHandler: KeyboardActionHandler","    ) {","        self.actionHandler = actionHandler","    }","","    let actionHandler: KeyboardActionHandler","","    @EnvironmentObject","    private var context: KeyboardContext","","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Services are not injected into the view hierarchy, and must be passed around. KeyboardKit uses init injection for both state and services.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can easily modify any state and replace any service with custom implementations. For instance, here we disable autocomplete with the shared "},{"type":"reference","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/AutocompleteContext","isActive":true},{"text":" and replace the default ","type":"text"},{"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/StandardKeyboardActionHandler","isActive":true,"type":"reference"},{"type":"text","text":" with a custom action handler:"}]},{"syntax":"swift","code":["class KeyboardViewController: KeyboardInputViewController {","","    override func viewDidLoad() {","        services.actionHandler = CustomActionHandler(","            inputViewController: self","        )","        super.viewDidLoad()","        state.autocompleteContext.isAutocompleteEnabled = false","    }","}","","class CustomActionHandler: StandardActionHandler {","","    open override func handle(","        _ gesture: KeyboardGesture, ","        on action: KeyboardAction","    ) {","        if gesture == .press && action == .space {","            print(\"Pressed space!\")","        }","        super.handle(gesture, on: action) ","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since services are lazy and resolved when theyâ€™re used for the first time, you should set up any custom services as early as possible, to ensure that the dependency graph is properly resolved."}]},{"level":2,"anchor":"Going-further","text":"Going further","type":"heading"},{"inlineContent":[{"text":"You should now have a basic understanding of how to set up KeyboardKit and KeyboardKit Pro. For more information & examples, see the various articles and take a look at the demo app.","type":"text"}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/keyboardkitpro\/getting-started"]},{"traits":[{"interfaceLanguage":"occ"}],"paths":["\/documentation\/keyboardkitpro\/getting-started"]}],"sections":[],"kind":"article","abstract":[{"type":"text","text":"This article describes how to get started with KeyboardKit."}],"metadata":{"role":"article","images":[{"identifier":"Page.png","type":"card"}],"color":{"standardColorIdentifier":"blue"},"title":"Getting Started","roleHeading":"Article","modules":[{"name":"KeyboardKitPro"}]},"references":{"doc://com.keyboardkit.KeyboardKitPro/documentation/KeyboardKitPro/KeyboardInputViewController/state":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14KeyboardKitPro0A0V","text":"Keyboard","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"KeyboardState","kind":"typeIdentifier","preciseIdentifier":"s:14KeyboardKitPro0A0V0A5StateC"}],"abstract":[{"text":"The default set of keyboard-specific state.","type":"text"}],"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/state","kind":"symbol","url":"\/documentation\/keyboardkitpro\/keyboardinputviewcontroller\/state","title":"state","role":"symbol"},"doc://com.keyboardkit.KeyboardKitPro/documentation/KeyboardKitPro/StandardKeyboardActionHandler":{"kind":"symbol","abstract":[{"type":"text","text":"This standard keyboard action handler is used by default by"},{"text":" ","type":"text"},{"type":"text","text":"KeyboardKit and provides a standard way of handling actions."}],"type":"topic","url":"\/documentation\/keyboardkitpro\/standardkeyboardactionhandler","navigatorTitle":[{"text":"StandardKeyboardActionHandler","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StandardKeyboardActionHandler"}],"role":"symbol","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/StandardKeyboardActionHandler","title":"StandardKeyboardActionHandler"},"doc://com.keyboardkit.KeyboardKitPro/documentation/KeyboardKitPro/SystemKeyboard":{"type":"topic","kind":"symbol","navigatorTitle":[{"text":"SystemKeyboard","kind":"identifier"}],"url":"\/documentation\/keyboardkitpro\/systemkeyboard","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/SystemKeyboard","abstract":[{"text":"This keyboard can be used to create alphabetic, numeric and","type":"text"},{"type":"text","text":" "},{"text":"symbolic keyboards that mimic the native iOS keyboard.","type":"text"}],"title":"SystemKeyboard","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SystemKeyboard"}],"role":"symbol"},"doc://com.keyboardkit.KeyboardKitPro/documentation/KeyboardKitPro/KeyboardInputViewController":{"url":"\/documentation\/keyboardkitpro\/keyboardinputviewcontroller","kind":"symbol","title":"KeyboardInputViewController","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"KeyboardInputViewController","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardInputViewController"}],"abstract":[{"text":"This class extends ","type":"text"},{"type":"codeVoice","code":"UIInputViewController"},{"text":" with KeyboardKit","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specific functionality."}],"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController","role":"symbol"},"doc://com.keyboardkit.KeyboardKitPro/documentation/KeyboardKitPro/KeyboardInputViewController/services":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"services"},{"text":": ","kind":"text"},{"text":"Keyboard","preciseIdentifier":"s:14KeyboardKitPro0A0V","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"KeyboardServices","preciseIdentifier":"s:14KeyboardKitPro0A0V0A8ServicesC","kind":"typeIdentifier"}],"title":"services","type":"topic","kind":"symbol","url":"\/documentation\/keyboardkitpro\/keyboardinputviewcontroller\/services","abstract":[{"type":"text","text":"The default set of keyboard-specific services."}],"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/services","role":"symbol"},"doc://com.keyboardkit.KeyboardKitPro/documentation/KeyboardKitPro":{"role":"collection","kind":"symbol","abstract":[{"text":"KeyboardKit helps you create custom keyboard extensions with Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/keyboardkitpro","type":"topic","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro","title":"KeyboardKitPro"},"doc://com.keyboardkit.KeyboardKitPro/documentation/KeyboardKitPro/AutocompleteContext":{"kind":"symbol","abstract":[{"text":"This observable class can be used to handle an autocomplete","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specific state, including configurations and suggestions."}],"type":"topic","url":"\/documentation\/keyboardkitpro\/autocompletecontext","navigatorTitle":[{"kind":"identifier","text":"AutocompleteContext"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutocompleteContext"}],"role":"symbol","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/AutocompleteContext","title":"AutocompleteContext"},"Page.png":{"alt":null,"identifier":"Page.png","type":"image","variants":[{"url":"\/images\/Page.png","traits":["1x","light"]}]},"doc://com.keyboardkit.KeyboardKitPro/documentation/KeyboardKitPro/KeyboardInputViewController/viewWillSetupKeyboard()":{"abstract":[{"text":"This function is called when a keyboard view must be","type":"text"},{"type":"text","text":" "},{"text":"created. It will by default setup a ","type":"text"},{"identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/SystemKeyboard","type":"reference","isActive":true},{"type":"text","text":"."}],"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"viewWillSetupKeyboard"},{"kind":"text","text":"()"}],"url":"\/documentation\/keyboardkitpro\/keyboardinputviewcontroller\/viewwillsetupkeyboard()","identifier":"doc:\/\/com.keyboardkit.KeyboardKitPro\/documentation\/KeyboardKitPro\/KeyboardInputViewController\/viewWillSetupKeyboard()","role":"symbol","title":"viewWillSetupKeyboard()"}},"variantOverrides":[{"patch":[{"value":"occ","op":"replace","path":"\/identifier\/interfaceLanguage"},{"value":null,"op":"add","path":"\/topicSections"},{"op":"add","path":"\/seeAlsoSections","value":null},{"value":"StandardKeyboardActionHandler","op":"replace","path":"\/references\/doc:~1~1com.keyboardkit.KeyboardKitPro~1documentation~1KeyboardKitPro~1StandardKeyboardActionHandler\/title"},{"op":"replace","value":[{"text":"StandardKeyboardActionHandler","kind":"identifier"}],"path":"\/references\/doc:~1~1com.keyboardkit.KeyboardKitPro~1documentation~1KeyboardKitPro~1StandardKeyboardActionHandler\/fragments"},{"op":"replace","path":"\/references\/doc:~1~1com.keyboardkit.KeyboardKitPro~1documentation~1KeyboardKitPro~1KeyboardInputViewController\/title","value":"KeyboardInputViewController"},{"path":"\/references\/doc:~1~1com.keyboardkit.KeyboardKitPro~1documentation~1KeyboardKitPro~1KeyboardInputViewController\/fragments","value":[{"text":"KeyboardInputViewController","kind":"identifier"}],"op":"replace"}],"traits":[{"interfaceLanguage":"occ"}]}]}
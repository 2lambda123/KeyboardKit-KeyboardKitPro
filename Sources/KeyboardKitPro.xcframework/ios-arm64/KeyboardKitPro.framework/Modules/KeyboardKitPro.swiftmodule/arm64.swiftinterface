// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KeyboardKitPro
import Foundation
import KeyboardKit
@_exported import KeyboardKitPro
import Swift
import SwiftUI
import UIKit
import _Concurrency
public class FrenchSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
extension KeyboardKit.KeyboardLocale {
  public var keyboardInputSetProvider: KeyboardKit.KeyboardInputSetProvider & KeyboardKit.LocalizedService {
    get
  }
}
public class GermanKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public class DanishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public class FinnishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public class ItalianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public class NorwegianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public class EnglishGbKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public typealias StandardAutocompleteSuggestionProvider = KeyboardKitPro.StandardAutocompleteProvider
public class SpanishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public class EnglishUsKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public class FinnishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
open class ExternalAutocompleteProvider<Result> : KeyboardKit.AutocompleteProvider where Result : KeyboardKitPro.ExternalAutocompleteResult {
  public init(urlPattern: Swift.String, urlLocaleReplacementPattern: Swift.String = "{LOCALE}", urlTextReplacementPattern: Swift.String = "{TEXT}", locale: Foundation.Locale = .current, minimumTextLength: Swift.Int = 3, throttleInterval: Swift.Double? = nil, debounceInterval: Swift.Double? = nil)
  public var locale: Foundation.Locale
  public enum AutocompleteError : Swift.Error {
    case invalidUrl(Swift.String)
    case invalidResponse(Foundation.Data?, Foundation.URLResponse?)
    case noData
    case textTooShort(Swift.String)
  }
  open func autocompleteSuggestions(for text: Swift.String, completion: @escaping KeyboardKit.AutocompleteResponse)
  open func autocompleteUrlString(for text: Swift.String) -> Swift.String
  public var canIgnoreWords: Swift.Bool {
    get
  }
  public var canLearnWords: Swift.Bool {
    get
  }
  public var ignoredWords: [Swift.String]
  public func hasIgnoredWord(_ word: Swift.String) -> Swift.Bool
  public func hasLearnedWord(_ word: Swift.String) -> Swift.Bool
  public func ignoreWord(_ word: Swift.String)
  public func removeIgnoredWord(_ word: Swift.String)
  public func learnWord(_ word: Swift.String)
  public func unlearnWord(_ word: Swift.String)
  @objc deinit
}
extension KeyboardKit.KeyboardInputViewController {
  @_Concurrency.MainActor(unsafe) public func setupPro(withLicenseKey key: Swift.String) throws
  @_Concurrency.MainActor(unsafe) public func setupPro<Content>(withLicenseKey key: Swift.String, view: Content) throws where Content : SwiftUI.View
}
public protocol ExternalAutocompleteResult : Swift.Decodable, Swift.Encodable {
  var suggestions: [KeyboardKit.AutocompleteSuggestion] { get }
}
public class DutchSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class GermanSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class SpanishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActions(for char: Swift.String) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class DanishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
extension Swift.String {
  public func base64Decoded() -> Swift.String?
  public func base64Encoded() -> Swift.String?
}
public class EnglishGbSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class DutchKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public class SwedishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
extension KeyboardKit.KeyboardLocale {
  public var secondaryCalloutActionProvider: KeyboardKit.LocalizedService & KeyboardKit.SecondaryCalloutActionProvider {
    get
  }
}
public class FrenchKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
open class StandardAutocompleteProvider : KeyboardKit.AutocompleteProvider {
  public init(maxCount: Swift.Int = 3, locale: Foundation.Locale = .current)
  public var locale: Foundation.Locale
  public func autocompleteSuggestions(for text: Swift.String, completion: (KeyboardKit.AutocompleteResult) -> Swift.Void)
  public var canIgnoreWords: Swift.Bool {
    get
  }
  public var canLearnWords: Swift.Bool {
    get
  }
  public var ignoredWords: [Swift.String] {
    get
    set
  }
  public func hasIgnoredWord(_ word: Swift.String) -> Swift.Bool
  public func hasLearnedWord(_ word: Swift.String) -> Swift.Bool
  public func ignoreWord(_ word: Swift.String)
  public func learnWord(_ word: Swift.String)
  public func removeIgnoredWord(_ word: Swift.String)
  public func unlearnWord(_ word: Swift.String)
  @objc deinit
}
public enum LicenseError : Swift.Error, Swift.Equatable {
  case expiredLicense(expirationDate: Foundation.Date)
  case invalidBundle(Foundation.Bundle)
  case invalidLocale(KeyboardKit.KeyboardLocale)
  case invalidLicenseKey(Swift.String)
  case missingLicense
  public static func == (a: KeyboardKitPro.LicenseError, b: KeyboardKitPro.LicenseError) -> Swift.Bool
}
extension KeyboardKitPro.LicenseError {
  public var isFatal: Swift.Bool {
    get
  }
}
public class ItalianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class NorwegianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ProSecondaryCalloutActionProvider : KeyboardKit.BaseSecondaryCalloutActionProvider, KeyboardKit.LocalizedService {
  public init(locale: KeyboardKit.KeyboardLocale)
  final public let locale: KeyboardKit.KeyboardLocale
  final public let localeKey: Swift.String
  @objc deinit
}
extension KeyboardKitPro.KeyboardKitLicense {
  public struct Customer : Swift.Equatable {
    public static func == (a: KeyboardKitPro.KeyboardKitLicense.Customer, b: KeyboardKitPro.KeyboardKitLicense.Customer) -> Swift.Bool
  }
}
public class SwedishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current)
  public func alphabeticInputSet() -> KeyboardKit.AlphabeticKeyboardInputSet
  public func numericInputSet() -> KeyboardKit.NumericKeyboardInputSet
  public func symbolicInputSet() -> KeyboardKit.SymbolicKeyboardInputSet
  @objc deinit
}
public struct KeyboardKitLicense : Swift.Hashable, Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public let licenseKey: Swift.String
  public let expires: Foundation.Date
  public let customer: KeyboardKitPro.KeyboardKitLicense.Customer
  public let bundleIds: [Swift.String]
  public let locales: [KeyboardKit.KeyboardLocale]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: KeyboardKitPro.KeyboardKitLicense, b: KeyboardKitPro.KeyboardKitLicense) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
extension KeyboardKitPro.KeyboardKitLicense {
  public static var current: KeyboardKitPro.KeyboardKitLicense? {
    get
  }
  @discardableResult
  public static func register(licenseKey: Swift.String) throws -> KeyboardKitPro.KeyboardKitLicense?
}
public class ProKeyboardInputSetProvider : KeyboardKit.LocalizedService {
  public init(device: UIKit.UIDevice = .current, locale: KeyboardKit.KeyboardLocale)
  final public let device: UIKit.UIDevice
  final public let locale: KeyboardKit.KeyboardLocale
  final public let localeKey: Swift.String
  @objc deinit
}
public class EnglishUsSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init()
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  @objc deinit
}

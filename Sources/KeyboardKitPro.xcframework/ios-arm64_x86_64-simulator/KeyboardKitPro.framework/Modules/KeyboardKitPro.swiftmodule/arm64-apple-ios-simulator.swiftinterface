// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KeyboardKitPro
import Foundation
import KeyboardKit
@_exported import KeyboardKitPro
import Swift
import SwiftUI
import UIKit
import _Concurrency
public class RussianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class FrenchSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
extension KeyboardKit.KeyboardLocale {
  
  #if compiler(>=5.3) && $EffectfulProp
  public var keyboardInputSetProvider: KeyboardKit.KeyboardInputSetProvider & KeyboardKit.LocalizedService {
    get throws
  }
  #endif

}
public class AlbanianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class EstonianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class GermanKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public struct ToggleToolbar<Toolbar, ToggledToolbar> : SwiftUI.View where Toolbar : SwiftUI.View, ToggledToolbar : SwiftUI.View {
  public init(animation: KeyboardKitPro.ToggleToolbarAnimation = .opacity, toolbar: Toolbar, toggledToolbar: ToggledToolbar) throws
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14KeyboardKitPro13ToggleToolbarV4bodyQrvp", 0) __<Toolbar, ToggledToolbar>
}
public enum ToggleToolbarAnimation : Swift.String, Swift.CaseIterable, Swift.Codable, Swift.Equatable, Swift.Identifiable {
  case opacity
  case flipUp
  case flipDown
  case slideUp
  case slideDown
  public var id: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [KeyboardKitPro.ToggleToolbarAnimation]
  public typealias ID = Swift.String
  public typealias RawValue = Swift.String
  public static var allCases: [KeyboardKitPro.ToggleToolbarAnimation] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public class DanishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class FinnishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class PolishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class PersianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class RomanianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class ItalianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class NorwegianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class EnglishGbKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class SpanishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class ArabicSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct AudioFeedbackToggleButton<ViewType> : SwiftUI.View where ViewType : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(settings: KeyboardKit.KeyboardFeedbackSettings, enabledView: ViewType, disabledView: ViewType) throws
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14KeyboardKitPro25AudioFeedbackToggleButtonV4bodyQrvp", 0) __<ViewType>
}
extension KeyboardKitPro.AudioFeedbackToggleButton where ViewType == SwiftUI.Image {
  @_Concurrency.MainActor(unsafe) public init(settings: KeyboardKit.KeyboardFeedbackSettings, enabledImage: SwiftUI.Image = .keyboardAudioFeedbackEnabled, disabledImage: SwiftUI.Image = .keyboardAudioFeedbackDisabled) throws
}
public class EnglishUsKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class FinnishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class PortugueseKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
@available(iOS 14.0, *)
public struct EnabledLabel : SwiftUI.View {
  public init(isEnabled: Swift.Bool, enabledText: Swift.String, enabledIcon: SwiftUI.Image = .enabledLabelEnabledIcon, enabledColor: SwiftUI.Color = .green, disabledText: Swift.String, disabledIcon: SwiftUI.Image = .enabledLabelDisabledIcon, disabledColor: SwiftUI.Color = .orange) throws
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14KeyboardKitPro12EnabledLabelV4bodyQrvp", 0) __
}
public class BrazilianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for char: Swift.String) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
open class ExternalAutocompleteProvider<Result> where Result : KeyboardKitPro.ExternalAutocompleteResult {
  public init(urlPattern: Swift.String, urlLocaleReplacementPattern: Swift.String = "{LOCALE}", urlTextReplacementPattern: Swift.String = "{TEXT}", locale: Foundation.Locale = .current, minimumTextLength: Swift.Int = 3, throttleInterval: Swift.Double? = nil, debounceInterval: Swift.Double? = nil) throws
  public var locale: Foundation.Locale
  public enum AutocompleteError : Swift.Error {
    case invalidUrl(Swift.String)
    case invalidResponse(Foundation.Data?, Foundation.URLResponse?)
    case noData
    case textTooShort(Swift.String)
  }
  open func autocompleteSuggestions(for text: Swift.String, completion: @escaping KeyboardKit.AutocompleteCompletion)
  open func autocompleteUrlString(for text: Swift.String) -> Swift.String
  public var canIgnoreWords: Swift.Bool {
    get
  }
  public var canLearnWords: Swift.Bool {
    get
  }
  public var ignoredWords: [Swift.String]
  public var learnedWords: [Swift.String]
  public func hasIgnoredWord(_ word: Swift.String) -> Swift.Bool
  public func hasLearnedWord(_ word: Swift.String) -> Swift.Bool
  public func ignoreWord(_ word: Swift.String)
  public func removeIgnoredWord(_ word: Swift.String)
  public func learnWord(_ word: Swift.String)
  public func unlearnWord(_ word: Swift.String)
  @objc deinit
}
extension KeyboardKit.KeyboardInputViewController {
  @_Concurrency.MainActor(unsafe) public static var hasShownErrorAlert: Swift.Bool
  @_Concurrency.MainActor(unsafe) public func setupPro(withLicenseKey key: Swift.String) throws
  @_Concurrency.MainActor(unsafe) public func setupPro<Content>(withLicenseKey key: Swift.String, view: Content) throws where Content : SwiftUI.View
}
public class IrishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public protocol ExternalAutocompleteResult : Swift.Decodable, Swift.Encodable {
  var suggestions: [KeyboardKit.AutocompleteSuggestion] { get }
}
public class DutchSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class GermanSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class LithuanianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class SpanishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for char: Swift.String) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class RomanianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class DanishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class AlbanianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class EnglishGbSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class KurdishSoraniKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
extension KeyboardKitPro.LicenseTier {
  public static let basic: KeyboardKitPro.LicenseTier
  public static let silver: KeyboardKitPro.LicenseTier
  public static let gold: KeyboardKitPro.LicenseTier
}
@_Concurrency.MainActor(unsafe) public struct HapticFeedbackToggleButton<ViewType> : SwiftUI.View where ViewType : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(settings: KeyboardKit.KeyboardFeedbackSettings, enabledView: ViewType, disabledView: ViewType) throws
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14KeyboardKitPro26HapticFeedbackToggleButtonV4bodyQrvp", 0) __<ViewType>
}
extension KeyboardKitPro.HapticFeedbackToggleButton where ViewType == SwiftUI.Image {
  @_Concurrency.MainActor(unsafe) public init(settings: KeyboardKit.KeyboardFeedbackSettings, enabledImage: SwiftUI.Image = .keyboardHapticFeedbackEnabled, disabledImage: SwiftUI.Image = .keyboardHapticFeedbackDisabled) throws
}
public class DutchKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class PortugueseSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for char: Swift.String) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class SwedishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
extension KeyboardKit.KeyboardLocale {
  
  #if compiler(>=5.3) && $EffectfulProp
  public var secondaryCalloutActionProvider: KeyboardKit.LocalizedService & KeyboardKit.SecondaryCalloutActionProvider {
    get throws
  }
  #endif

}
public class BelarusianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class LatvianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class KurdishSoraniSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class IrishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class FrenchKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
open class StandardAutocompleteProvider : KeyboardKit.AutocompleteProvider {
  public init(maxCount: Swift.Int = 3, locale: Foundation.Locale = .current, lexicon: UIKit.UILexicon? = nil) throws
  public var locale: Foundation.Locale
  public var hasLexicon: Swift.Bool {
    get
  }
  public func registerLexicon(_ lexicon: UIKit.UILexicon)
  public func autocompleteSuggestions(for text: Swift.String, completion: (KeyboardKit.AutocompleteResult) -> Swift.Void)
  public var canIgnoreWords: Swift.Bool {
    get
  }
  public var canLearnWords: Swift.Bool {
    get
  }
  public var ignoredWords: [Swift.String] {
    get
    set
  }
  public var learnedWords: [Swift.String] {
    get
  }
  public func hasIgnoredWord(_ word: Swift.String) -> Swift.Bool
  public func hasLearnedWord(_ word: Swift.String) -> Swift.Bool
  public func ignoreWord(_ word: Swift.String)
  public func learnWord(_ word: Swift.String)
  public func removeIgnoredWord(_ word: Swift.String)
  public func unlearnWord(_ word: Swift.String)
  @objc deinit
}
public enum LicenseError : Swift.Error, Swift.Equatable {
  case expiredLicense(expirationDate: Foundation.Date)
  case invalidBundle(Foundation.Bundle)
  case invalidLicenseKey(Swift.String)
  case invalidLocale(KeyboardKit.KeyboardLocale)
  case missingLicense
  public static func == (a: KeyboardKitPro.LicenseError, b: KeyboardKitPro.LicenseError) -> Swift.Bool
}
extension KeyboardKitPro.LicenseError {
  public var isFatal: Swift.Bool {
    get
  }
}
public class PolishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class LatvianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class PersianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
extension SwiftUI.Image {
  public static let keyboardAudioFeedbackEnabled: SwiftUI.Image
  public static let keyboardAudioFeedbackDisabled: SwiftUI.Image
  public static let keyboardHapticFeedbackEnabled: SwiftUI.Image
  public static let keyboardHapticFeedbackDisabled: SwiftUI.Image
  public static let enabledLabelEnabledIcon: SwiftUI.Image
  public static let enabledLabelDisabledIcon: SwiftUI.Image
}
@available(*, deprecated, renamed: "License")
public typealias KeyboardKitLicense = KeyboardKitPro.License
@available(*, deprecated, renamed: "License")
extension KeyboardKitPro.License {
  @available(*, deprecated, renamed: "LicenseCustomer")
  public typealias Customer = KeyboardKitPro.LicenseCustomer
}
public class RussianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class TurkishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class UkrainianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class BrazilianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
@available(iOS 14.0, *)
public struct KeyboardEnabledLabel : SwiftUI.View, KeyboardKit.KeyboardEnabledStateInspector {
  public init(keyboardBundleId: Swift.String, enabledText: Swift.String, enabledIcon: SwiftUI.Image = .enabledLabelEnabledIcon, enabledColor: SwiftUI.Color = .green, disabledText: Swift.String, disabledIcon: SwiftUI.Image = .enabledLabelDisabledIcon, disabledColor: SwiftUI.Color = .orange) throws
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14KeyboardKitPro0A12EnabledLabelV4bodyQrvp", 0) __
}
public class IcelandicKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class ItalianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public struct LicenseTier : Swift.Codable, Swift.Equatable, Swift.Identifiable {
  public init(id: Swift.String, name: Swift.String, level: Swift.Int)
  public let id: Swift.String
  public let name: Swift.String
  public let level: Swift.Int
  public static func == (a: KeyboardKitPro.LicenseTier, b: KeyboardKitPro.LicenseTier) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension KeyboardKitPro.LicenseTier {
  public static let standard: KeyboardKitPro.LicenseTier
}
public class NorwegianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class IcelandicSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for char: Swift.String) -> [KeyboardKit.KeyboardAction]
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ProSecondaryCalloutActionProvider : KeyboardKit.BaseSecondaryCalloutActionProvider, KeyboardKit.LocalizedService {
  public init(locale: KeyboardKit.KeyboardLocale) throws
  final public let locale: KeyboardKit.KeyboardLocale
  final public let localeKey: Swift.String
  @objc deinit
}
public class LithuanianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class EstonianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public struct LicenseCustomer : Swift.Codable, Swift.Equatable {
  public init(name: Swift.String, contact: Swift.String, address: Swift.String, email: Swift.String, phone: Swift.String, additionalInfo: [Swift.String : Swift.String] = [:])
  public let name: Swift.String
  public let contact: Swift.String
  public let address: Swift.String
  public let email: Swift.String
  public let phone: Swift.String
  public let additionalInfo: [Swift.String : Swift.String]
  public static func == (a: KeyboardKitPro.LicenseCustomer, b: KeyboardKitPro.LicenseCustomer) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class TurkishSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class BelarusianSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActionString(for char: Swift.String) -> Swift.String
  @objc deinit
}
public class SwedishKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public struct License : Swift.Codable, Swift.Hashable, Swift.Identifiable {
  public init(licenseKey: Swift.String, tier: KeyboardKitPro.LicenseTier = .standard, expires: Foundation.Date, customer: KeyboardKitPro.LicenseCustomer, bundleIds: [Swift.String], locales: [KeyboardKit.KeyboardLocale], renewalPrice: Swift.Int? = nil, additionalInfo: [Swift.String : Swift.String] = [:])
  public var id: Swift.String {
    get
  }
  public var tier: KeyboardKitPro.LicenseTier
  public let licenseKey: Swift.String
  public let expires: Foundation.Date
  public let customer: KeyboardKitPro.LicenseCustomer
  public let bundleIds: [Swift.String]
  public let locales: [KeyboardKit.KeyboardLocale]
  public let renewalPrice: Swift.Int?
  public let additionalInfo: [Swift.String : Swift.String]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: KeyboardKitPro.License, b: KeyboardKitPro.License) -> Swift.Bool
  public typealias ID = Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension KeyboardKitPro.License {
  public static var current: KeyboardKitPro.License? {
    get
  }
  @discardableResult
  public static func register(licenseKey: Swift.String) throws -> KeyboardKitPro.License?
}
@available(iOS 14.0, *)
public struct KeyboardActiveLabel : SwiftUI.View, KeyboardKit.KeyboardEnabledStateInspector {
  public init(keyboardBundleId: Swift.String, enabledText: Swift.String, enabledIcon: SwiftUI.Image = .enabledLabelEnabledIcon, enabledColor: SwiftUI.Color = .green, disabledText: Swift.String, disabledIcon: SwiftUI.Image = .enabledLabelDisabledIcon, disabledColor: SwiftUI.Color = .orange) throws
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14KeyboardKitPro0A11ActiveLabelV4bodyQrvp", 0) __
}
public class ProKeyboardInputSetProvider : KeyboardKit.LocalizedService {
  public init(device: UIKit.UIDevice = .current, locale: KeyboardKit.KeyboardLocale) throws
  final public let device: UIKit.UIDevice
  final public let locale: KeyboardKit.KeyboardLocale
  final public let localeKey: Swift.String
  @objc deinit
}
public class EnglishUsSecondaryCalloutActionProvider : KeyboardKitPro.ProSecondaryCalloutActionProvider {
  public init() throws
  override public func secondaryCalloutActions(for action: KeyboardKit.KeyboardAction) -> [KeyboardKit.KeyboardAction]
  @objc deinit
}
public class UkrainianKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
public class ArabicKeyboardInputSetProvider : KeyboardKitPro.ProKeyboardInputSetProvider, KeyboardKit.DeviceSpecificInputSetProvider {
  public init(device: UIKit.UIDevice = .current) throws
  public var alphabeticInputSet: KeyboardKit.AlphabeticKeyboardInputSet {
    get
  }
  public var numericInputSet: KeyboardKit.NumericKeyboardInputSet {
    get
  }
  public var symbolicInputSet: KeyboardKit.SymbolicKeyboardInputSet {
    get
  }
  @objc deinit
}
extension KeyboardKitPro.ToggleToolbarAnimation : Swift.Hashable {}
extension KeyboardKitPro.ToggleToolbarAnimation : Swift.RawRepresentable {}
